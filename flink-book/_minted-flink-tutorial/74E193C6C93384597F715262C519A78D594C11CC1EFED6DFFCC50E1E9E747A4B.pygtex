\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.common.eventtime.SerializableTimestampAssigner}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.common.eventtime.WatermarkStrategy}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.common.state.ValueState}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.common.state.ValueStateDescriptor}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.common.typeinfo.Types}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.api.java.tuple.Tuple2}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.configuration.Configuration}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.streaming.api.environment.StreamExecutionEnvironment}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.streaming.api.functions.KeyedProcessFunction}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.apache.flink.util.Collector}\PYG{o}{;}

\PYG{k+kn}{import} \PYG{n+nn}{java.util.HashMap}\PYG{o}{;}

\PYG{c+c1}{// 使用状态机来实现检测连续三次登录失败}
\PYG{k+kd}{public} \PYG{k+kd}{class} \PYG{n+nc}{StateMachineExample} \PYG{o}{\PYGZob{}}
    \PYG{k+kd}{public} \PYG{k+kd}{static} \PYG{k+kt}{void} \PYG{n+nf}{main}\PYG{o}{(}\PYG{n}{String}\PYG{o}{[]} \PYG{n}{args}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
        \PYG{n}{StreamExecutionEnvironment} \PYG{n}{env} \PYG{o}{=} \PYG{n}{StreamExecutionEnvironment}\PYG{o}{.}\PYG{n+na}{getExecutionEnvironment}\PYG{o}{();}
        \PYG{n}{env}\PYG{o}{.}\PYG{n+na}{setParallelism}\PYG{o}{(}\PYG{l+m+mi}{1}\PYG{o}{);}

        \PYG{n}{SingleOutputStreamOperator}\PYG{o}{\PYGZlt{}}\PYG{n}{Event}\PYG{o}{\PYGZgt{}} \PYG{n}{stream} \PYG{o}{=} \PYG{n}{env}
                \PYG{o}{.}\PYG{n+na}{fromElements}\PYG{o}{(}
                        \PYG{k}{new} \PYG{n}{Event}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}user\PYGZhy{}1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{,} \PYG{l+m+mi}{1000L}\PYG{o}{),}
                        \PYG{k}{new} \PYG{n}{Event}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}user\PYGZhy{}1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{,} \PYG{l+m+mi}{2000L}\PYG{o}{),}
                        \PYG{k}{new} \PYG{n}{Event}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}user\PYGZhy{}1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{,} \PYG{l+m+mi}{3000L}\PYG{o}{),}
                        \PYG{k}{new} \PYG{n}{Event}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}user\PYGZhy{}2\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}success\PYGZdq{}}\PYG{o}{,} \PYG{l+m+mi}{3000L}\PYG{o}{),}
                        \PYG{k}{new} \PYG{n}{Event}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}user\PYGZhy{}1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{,} \PYG{l+m+mi}{4000L}\PYG{o}{)}
                \PYG{o}{)}
                \PYG{o}{.}\PYG{n+na}{assignTimestampsAndWatermarks}\PYG{o}{(}
                    \PYG{n}{WatermarkStrategy}\PYG{o}{.\PYGZlt{}}\PYG{n}{Event}\PYG{o}{\PYGZgt{}}\PYG{n}{forMonotonousTimestamps}\PYG{o}{()}
                    \PYG{o}{.}\PYG{n+na}{withTimestampAssigner}\PYG{o}{(}\PYG{k}{new} \PYG{n}{SerializableTimestampAssigner}\PYG{o}{\PYGZlt{}}\PYG{n}{Event}\PYG{o}{\PYGZgt{}()} \PYG{o}{\PYGZob{}}
                            \PYG{n+nd}{@Override}
                            \PYG{k+kd}{public} \PYG{k+kt}{long} \PYG{n+nf}{extractTimestamp}\PYG{o}{(}\PYG{n}{Event} \PYG{n}{element}\PYG{o}{,} \PYG{k+kt}{long} \PYG{n}{recordTimestamp}\PYG{o}{)} \PYG{o}{\PYGZob{}}
                                \PYG{k}{return} \PYG{n}{element}\PYG{o}{.}\PYG{n+na}{timestamp}\PYG{o}{;}
                            \PYG{o}{\PYGZcb{}}
                    \PYG{o}{\PYGZcb{}));}

        \PYG{n}{stream}
                \PYG{o}{.}\PYG{n+na}{keyBy}\PYG{o}{(}\PYG{n}{r} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{r}\PYG{o}{.}\PYG{n+na}{user}\PYG{o}{)}
                \PYG{o}{.}\PYG{n+na}{process}\PYG{o}{(}\PYG{k}{new} \PYG{n}{KeyedProcessFunction}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{,} \PYG{n}{Event}\PYG{o}{,} \PYG{n}{String}\PYG{o}{\PYGZgt{}()} \PYG{o}{\PYGZob{}}
                    \PYG{c+c1}{// 状态机}
                    \PYG{k+kd}{private} \PYG{n}{HashMap}\PYG{o}{\PYGZlt{}}\PYG{n}{Tuple2}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{,} \PYG{n}{String}\PYG{o}{\PYGZgt{},} \PYG{n}{String}\PYG{o}{\PYGZgt{}} \PYG{n}{stateMachine} \PYG{o}{=} \PYG{k}{new} \PYG{n}{HashMap}\PYG{o}{\PYGZlt{}\PYGZgt{}();}
                    \PYG{c+c1}{// 当前状态}
                    \PYG{k+kd}{private} \PYG{n}{ValueState}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{\PYGZgt{}} \PYG{n}{currentState}\PYG{o}{;}

                    \PYG{n+nd}{@Override}
                    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{open}\PYG{o}{(}\PYG{n}{Configuration} \PYG{n}{parameters}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
                        \PYG{k+kd}{super}\PYG{o}{.}\PYG{n+na}{open}\PYG{o}{(}\PYG{n}{parameters}\PYG{o}{);}
                        \PYG{c+c1}{// 状态转移矩阵}
                        \PYG{c+c1}{// key：(状态，接收到事件的类型)}
                        \PYG{c+c1}{// value：将要跳转到的状态}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}INITIAL\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}success\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}SUCCESS\PYGZdq{}}\PYG{o}{);}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}INITIAL\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}S1\PYGZdq{}}\PYG{o}{);}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}S1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}S2\PYGZdq{}}\PYG{o}{);}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}S2\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}fail\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}FAIL\PYGZdq{}}\PYG{o}{);}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}S1\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}success\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}SUCCESS\PYGZdq{}}\PYG{o}{);}
                        \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{put}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}S2\PYGZdq{}}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}success\PYGZdq{}}\PYG{o}{),} \PYG{l+s}{\PYGZdq{}SUCCESS\PYGZdq{}}\PYG{o}{);}

                        \PYG{n}{currentState} \PYG{o}{=} \PYG{n}{getRuntimeContext}\PYG{o}{().}\PYG{n+na}{getState}\PYG{o}{(}
                                \PYG{k}{new} \PYG{n}{ValueStateDescriptor}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{\PYGZgt{}(}\PYG{l+s}{\PYGZdq{}current\PYGZhy{}state\PYGZdq{}}\PYG{o}{,} \PYG{n}{Types}\PYG{o}{.}\PYG{n+na}{STRING}\PYG{o}{)}
                        \PYG{o}{);}
                    \PYG{o}{\PYGZcb{}}

                    \PYG{n+nd}{@Override}
                    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{processElement}\PYG{o}{(}\PYG{n}{Event} \PYG{n}{value}\PYG{o}{,} \PYG{n}{Context} \PYG{n}{ctx}\PYG{o}{,} \PYG{n}{Collector}\PYG{o}{\PYGZlt{}}\PYG{n}{String}\PYG{o}{\PYGZgt{}} \PYG{n}{out}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
                        \PYG{k}{if} \PYG{o}{(}\PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{value}\PYG{o}{()} \PYG{o}{==} \PYG{k+kc}{null}\PYG{o}{)} \PYG{o}{\PYGZob{}}
                            \PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{update}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}INITIAL\PYGZdq{}}\PYG{o}{);}
                        \PYG{o}{\PYGZcb{}}

                        \PYG{c+c1}{// 计算将要跳转到的状态}
                        \PYG{n}{String} \PYG{n}{nextState} \PYG{o}{=} \PYG{n}{stateMachine}\PYG{o}{.}\PYG{n+na}{get}\PYG{o}{(}\PYG{n}{Tuple2}\PYG{o}{.}\PYG{n+na}{of}\PYG{o}{(}\PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{value}\PYG{o}{(),} \PYG{n}{value}\PYG{o}{.}\PYG{n+na}{eventType}\PYG{o}{));}

                        \PYG{k}{if} \PYG{o}{(}\PYG{n}{nextState}\PYG{o}{.}\PYG{n+na}{equals}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}FAIL\PYGZdq{}}\PYG{o}{))} \PYG{o}{\PYGZob{}}
                            \PYG{n}{out}\PYG{o}{.}\PYG{n+na}{collect}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}用户\PYGZdq{}} \PYG{o}{+} \PYG{n}{value}\PYG{o}{.}\PYG{n+na}{user} \PYG{o}{+} \PYG{l+s}{\PYGZdq{}连续三次登录失败了\PYGZdq{}}\PYG{o}{);}
                            \PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{update}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}S2\PYGZdq{}}\PYG{o}{);}
                        \PYG{o}{\PYGZcb{}} \PYG{k}{else} \PYG{k}{if} \PYG{o}{(}\PYG{n}{nextState}\PYG{o}{.}\PYG{n+na}{equals}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}SUCCESS\PYGZdq{}}\PYG{o}{))} \PYG{o}{\PYGZob{}}
                            \PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{clear}\PYG{o}{();}
                        \PYG{o}{\PYGZcb{}} \PYG{k}{else} \PYG{o}{\PYGZob{}}
                            \PYG{n}{currentState}\PYG{o}{.}\PYG{n+na}{update}\PYG{o}{(}\PYG{n}{nextState}\PYG{o}{);}
                        \PYG{o}{\PYGZcb{}}
                    \PYG{o}{\PYGZcb{}}
                \PYG{o}{\PYGZcb{})}
                \PYG{o}{.}\PYG{n+na}{print}\PYG{o}{();}

        \PYG{n}{env}\PYG{o}{.}\PYG{n+na}{execute}\PYG{o}{();}
    \PYG{o}{\PYGZcb{}}
    \PYG{k+kd}{public} \PYG{k+kd}{static} \PYG{k+kd}{class} \PYG{n+nc}{Event} \PYG{o}{\PYGZob{}}
        \PYG{k+kd}{public} \PYG{n}{String} \PYG{n}{user}\PYG{o}{;}
        \PYG{k+kd}{public} \PYG{n}{String} \PYG{n}{eventType}\PYG{o}{;}
        \PYG{k+kd}{public} \PYG{n}{Long} \PYG{n}{timestamp}\PYG{o}{;}

        \PYG{k+kd}{public} \PYG{n+nf}{Event}\PYG{o}{()} \PYG{o}{\PYGZob{}}
        \PYG{o}{\PYGZcb{}}

        \PYG{k+kd}{public} \PYG{n+nf}{Event}\PYG{o}{(}\PYG{n}{String} \PYG{n}{user}\PYG{o}{,} \PYG{n}{String} \PYG{n}{eventType}\PYG{o}{,} \PYG{n}{Long} \PYG{n}{timestamp}\PYG{o}{)} \PYG{o}{\PYGZob{}}
            \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{user} \PYG{o}{=} \PYG{n}{user}\PYG{o}{;}
            \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{eventType} \PYG{o}{=} \PYG{n}{eventType}\PYG{o}{;}
            \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{timestamp} \PYG{o}{=} \PYG{n}{timestamp}\PYG{o}{;}
        \PYG{o}{\PYGZcb{}}
    \PYG{o}{\PYGZcb{}}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
